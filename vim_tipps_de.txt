Jan Zwiener's Vim Commands
==========================

Common commands (Command mode)
------------------------------

Note: ^ means Ctrl key

 Key                | Description
--------------------|---------------------------------------------------------
 :q!                | Exit :-)
 Esc, ^C            | Command mode
 i                  | Insert mode
 w                  | Next word
 b                  | Previous word
 e                  | End of word
 s                  | Replace character and enter insert mode
 S                  | Replace complete line
 I                  | Insert at beginning of line
 A                  | Insert at end of line
 u                  | Undo
 ^R                 | Redo
 .                  | Redo input (very useful)
 ci"                | Edit current "string"
 ci'                | Edit current 'string'
 ciw                | Edit current word
 cit                | Edit tag content (very useful for HTML editing)
 cib                | Edit current parenthesis block
 ciB                | Edit current curly brace block
 "ay                | Copy to buffer a
 "ap                | Yank from buffer a
 ^Ra                | Insert buffer a in ex mode
 "1                 | Insert from buffer history (0-9)
 >>                 | Shift rightwards
 <<                 | Shift leftwards
 ^X ^O              | Omnicomplete
 ^N                 | Autocomplete
 ^X ^F              | Filename complete
 ^X ^L              | Line complete
 :tabnew            | New tab
 :tabclose          | Close tab
 gt                 | Next tab
 gT                 | Previous tab
 ^PageUp            | Next tab
 ^PageDown          | Previous tab
 :make              | Run make command
 :cl                | Error list (from make)
 :cn / :cp          | Next error
 :cd                | Change directory
 :lcd               | Change directory (for current window)
 =                  | Format selected area
 ==                 | Format current line
 =}                 | Format current function
 gg=G               | Format complete file
 qa                 | Record macro to buffer a
 q                  | End macro recording
 @a                 | Play macro a
 set wrap!          | Toggle line wrap mode
 set list!          | Show non printable characters
 ^A                 | Number increment
 ^X                 | Number decrement
 J                  | Join lines
 :noh               | Remove search highlighting
 :retab             | Convert tab to space (be careful with strings in programs)
 :retab!            | Convert space to tab (be careful with strings in programs)
 :r file            | Append content of file to current file
 :r! cmd            | Append output of "cmd" to current file
 :!cmd              | Execute command "cmd"
 :!sort             | Example: sort selected area
 :Ex                | File Explorer
 :%s/\r//g          | Delete DOS carriage returns ^M
 :%! <command>      | Run OS command on whole file
 :.! <command>      | Run OS command on current line
 :left              | Left-align line
 :right             | Right-align line
 :center            | Center line
 :redraw            | Redraw window
 :set var?          | Show current variable state
 :set ffs=unix,dos  | Recognize unix and dos end-of-line formats
 :set ffs=mac       | Recognize mac end-of-line format
 :set ff?           | Display current end-of-line format
 :set ff=unix       | Convert file to unix EOL format
 xp                 | Swap characters
 :X                 | Activate encryption, asking for key
 :setlocal cm=blowfish | Encryption method blowfish (strong) for this file
 :set cm=blowfish   | Encryption method blowfish (strong) as default
 g ^g               | Count the words in the file
 gq                 | Format the selection regions according to textwidth (tw)
 :set tw=50         | Set the textwidth to 50 characters
 :e scp://path/file | Edit file via SSH: scp://user@host/path/file
 :e scp://path/     | Open directory via SSH: scp://user@host/path/
 :bufdo cmd         | Execute command on every open buffer
 :tabdo cmd         | Execute command on every tab
 :bro ol            | Browse through recently used files
 :help digraphs     | Digraphs (special unicode characters)
 :dig               | Digraphs overview
 ^K                 | Digraph mode, followed by 2 characters from :dig table

Navigation
----------

 Key                | Description
--------------------|---------------------------------------------------------
 hjkl               | Cursor keys
 +                  | Jump to next line
 -                  | Jump to previous line
 w                  | Next word
 b                  | Previous word
 e                  | End of word
 H                  | Set cursor to top
 M                  | Set cursor to center
 L                  | Set cursor to bottom
 ^O                 | Navigate back
 ^I                 | Navigation forward
 )                  | Sentence forward
 (                  | Sentence backward
 *                  | Search for word under cursor
 g;                 | Goto last edit
 gi                 | Goto last edit and enter insert mode
 gf                 | Open file under cursor
 G                  | Goto end of file
 gg                 | Goto first line
 15G                | Goto line 15
 15gg               | Goto line 15
 :15                | Goto line 15
 20|                | Goto column 20
 gd                 | Goto local definition
 gD                 | Goto global definition
 [[                 | Goto previous {
 ]]                 | Goto next }
 ma                 | Mark current position as "a"
 'a                 | Goto to "a"
 %                  | Goto to matching element
 fX                 | Goto character X in line
 Fx                 | Go back to character X in line
 tX                 | Goto one character before X
 TX                 | Go back to one character before X
 ^W gf              | Open file in new tab

Scrolling
---------

 Key                | Description
--------------------|---------------------------------------------------------
 ^U                 | Scroll half a screen up
 ^D                 | Scroll half a screen down
 ^E                 | Scroll down one line
 ^Y                 | Scroll up one line
 ^F                 | Scroll down one screen
 ^B                 | Scroll up one screen
 gk                 | Go up one line in wrapped line
 gj                 | Go down one line in wrapped line
 zt                 | Set current line to the top of the screen
 zb                 | Set current line to the bottom of the screen
 zz                 | Set current line to the center of the screen

Buffer
------

 Key                | Description
--------------------|---------------------------------------------------------
 :ls                | Show open buffer
 :1b                | Open buffer 1
 :b1                | Open buffer 1
 :bd                | Delete buffer
 :bn, :bp           | Buffer next, buffer previous
 :enew              | Create and show new buffer (new file)
 :ball              | Show all buffers on the screen

Suche
-----

 Key                | Description
--------------------|---------------------------------------------------------
 /pattern           | Search for pattern
 /^R"               | Use clipboard content as pattern
 /^Ra               | Search for the content of buffer a
 /^R^W              | Search for word under cursor
 ?                  | Search backwards
 n                  | Repeat search
 N                  | Repeat search backwards
 :s/old/new/g       | Search and replace in current line
 :%s/old/new/g      | Search and replace in current buffer
 :%s/old/new/gc     | Ask for confirmation before replacing (c option)
 :%s/old/new/gci    | Case insensitive
 :%s/^/hello/g      | Add "hello" to the beginning of every line
 :g/string/d        | Delete all lines containing "string"
 :v/string/d        | Delete all lines not containing "string"
 :e **/*foo*        | Search for files recursively with foo in name
 :%s//new/g         | Use last search in search and replace

Regular expressions in search and replace
-----------------------------------------

 Key                | Description
--------------------|---------------------------------------------------------
 .                  | Any character
 *                  | Beliebige Anzahl des vorhergehenden Zeichens (0-n)x
 ?                  | Vorhergehender Ausdruck ist optional (0-1)x
 \+                 | Min. einmaliges Auftreten des vorhergehenden Zeichens
 \{n}               | Wie *, aber nur n-maliges Auftreten
 \{min,max}         | Min. - max. Auftreten
 ^                  | Zeilenanfang
 $                  | Zeilenende
 \                  | Behandelt das Zeichen als gewöhnliches Zeichen
 [ ]                | Beliebiges zwischen den Klammern angegebenes Zeichen
 \( \)              | Muster kann mit \1, \2 usw. wieder verwendet werden
 \< \>              | Wortanfang \< und Wortende \>
 \s                 | Whitespace (Leerzeichen und Tabulator)
 \S                 | Non-Whitespace
 \d                 | Ziffer
 \a                 | Buchstabe (Alphabet)
 \w                 | Word char
 \W                 | Non-word char
 &                  | Entspricht dem gefundenen Muster (:%s/jan/Zwiener, &/g)
 \&                 | Logical AND
 \|                 | Logical OR
 \@!                | Vorhergehendes Item darf nicht vorkommen: foo\(bar\)\@!
 \r                 | Neue Zeile (Beispiel Kommas in Zeilenumbruch :%s/, /\r/)
 \v                 | Very magic: Alle Zeichen außer 0-9,a-z haben besondere Bedeutung

Examples for regular expressions
--------------------------------

 Key                | Description
--------------------|---------------------------------------------------------
 /jo[ha]n           | Search john or joan
 /john\|joan        | Search john or joan
 /\<\d\d\d\d\>      | Search exactly 4 digits
 :%s/^\(.*\)\n\1$/\1/ | Alle Zeilen löschen, die doppelt vorkommen
 /.*Bush\&.*Clinton | Search for Bush AND Clinton
 /.*Bush\|.*Clinton | Search for Bush OR Clinton

Split view
----------

 Key                | Description
--------------------|---------------------------------------------------------
 ^w w               | Toggle between views
 ^w v               | Vertikal aufsplitten
 ^w s               | Horizontal aufsplitten
 ^w c               | Split schließen
 ^w jkhl            | Zwischen Fenstern springen
 :only              | Alle Splitscreens schliessen
 ^w r               | Ansicht rotieren
 ^w R               | Ansicht rotieren (zurück)
 ^w +               | Ansicht vergrößern (eine Zeile)
 ^w -               | Ansicht verkleinern (eine Zeile)
 ^w 5-              | Ansicht verkleinern (fünf Zeilen)
 ^w =               | Ansichten gleich aufteilen
 ^w 5_              | Ansicht 5 Zeilen hoch

Visual-Mode
-----------

 Key                | Description
--------------------|---------------------------------------------------------
 v                  | Markieren
 V                  | Zeilenweise markieren
 gv                 | Letzte Selektion herstellen
 ^Q                 | Blockmode
 c                  | Ändern (ändert Layout)
 r                  | Ersetzen
 I                  | Insert
 A                  | Append
 p                  | Text einfügen
 u                  | Alles klein schreiben
 U                  | Alles groß schreiben
 g?                 | Selektion mit ROT13 "verschlüsseln"

Browsen in Quellcode mit Tags (ctags)
-------------------------------------

Vim benötigt tags Datei zum Quellcode browsen.
Taste F11 mit ctags Aufruf belegen:
map <F11> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

In vimrc den tags Pfad angeben:
set tags=./tags,tags,./../tags,./../../tags,./../../../tags,./../../../../tags - Pfad für Suche nach ctags Datei angeben

 Key                | Description
--------------------|---------------------------------------------------------
 :ts main           | Suche nach "main" in Quellcode
 ^]                 | Gehe zu Definition von aktuellem Objekt unter Cursor
 ^O                 | Springe zurück
 ^I                 | Springe vor

Suchen in Dateien
-----------------

 Key                | Description
--------------------|---------------------------------------------------------
 :cd                | Aktuelles Verzeichnis anzeigen
 :cd Verz           | Verzeichnis wechseln
 :vimgrep /{pattern}/[g][j] {file} | Nach pattern in aktuellem Verz. suchen
 :noautocmd vimgrep /{pattern}/[g][j] {file} | Schnell nach pattern in aktuellem Verz. suchen
 :noautocmd vimgrep /{pattern}/j **/*.c | Schnell nach pattern in aktuellem Verz. + Unterverz. suchen
 :clist             | Ergebnisse der Suche von vimgrep anzeigen
 :copen             | Ergebnisse der Suche von vimgrep anzeigen (Scrollen möglich)
 :cclose            | Ergebnisse der Suche von vimgrep schliessen
 :colder            | Zu Ergebnissen von alter Suche wechseln
 :cnewer            | Zu Ergebnissen von neuer Suche wechseln

Optionen g, j:
g = Alle Treffer anzeigen
j = nicht zum Treffer springen

Rechtschreibprüfung
-------------------

 Key                | Description
--------------------|---------------------------------------------------------
 :set spell!        | Rechtschreibprüfung ein-/ausschalten
 :set spelllang=de  | Deutsches Wörterbuch aktivieren
 z=                 | Verbesserungsvorschlag für aktuelles Wort
 ]s                 | Nächster Rechtschreibfehler
 [s                 | Vorheriger Rechtschreibfehler
 zg                 | Wort in Liste der bekannten Wörter aufnehmen

Faltungen
---------

 Key                | Description
--------------------|---------------------------------------------------------
 :set folding=syntax| Faltungen nach Syntax aktivieren
 zi                 | Faltungen ein-/ausschalten
 zv                 | Aktuelle Position anzeigen
 zm                 | Faltungen schliessen
 zM                 | Alle Faltungen schliessen
 zr                 | Faltungen öffnen
 zR                 | Alle Faltungen öffnen

Makro
-----

:for i in range(1,10) | put ='192.168.0.'.i | endfor

UTF-8 mit Vim
-------------

 Key                | Description
--------------------|---------------------------------------------------------
 :set enc=cp850     | Datei als cp850 codiert anzeigen (bsp.: cp437 für DOS)
 :set enc=latin1    | Datei als latin1 codiert anzeigen
 :set enc=utf-8     | Datei als utf-8 codiert anzeigen
 :set fenc=utf-8    | Beim Speichern wird in utf-8 konvertiert/geschrieben
 :set fenc=latin1   | Beim Speichern wird in latin1 konvertiert/geschrieben
 :set bomb          | Schreibt Byte-Order-Mark für die automatische Erkennung beim nächsten Speichern.
 :e ++enc=<encoding>| Datei mit unterschiedlicher Kodierung neu laden.

Beispiel:
Datei liegt in latin1 vor und wird in Vim geladen. enc sollte auf latin1 stehen.
Wenn man jetzt fenc=utf-8 aktiviert und die Datei speichert, wird die Datei
in UTF-8 konvertiert (hierbei sollten keine Verluste auftreten).
Jetzt muss die Datei mit der neuen Codierung angezeigt werden:
:e ++enc=<utf-8>

